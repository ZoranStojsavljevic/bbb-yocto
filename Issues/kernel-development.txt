The kernel issue is described here: there is need to have the YOCTO minimum configuration with the kernel setup:
    [1] The entire kernel source code in: /usr/src/kernel/`uname-r`/<kernel source code>
    [2] The header files in: /usr/src/kernel/`uname-r`/<header file directory structures>

Point [1] is achieved with the following local.config file:
    https://github.com/ZoranStojsavljevic/bbb-yocto/blob/master/Issues/local-devsrc.conf

    Namely, with the following snippets in the local.conf:
    TOOLCHAIN_TARGET_TASK_append = " packagegroup-core-tools-profile packagegroup-core-buildessential kernel-devsrc"
    KERNEL_DEV_TOOLS = "packagegroup-core-tools-profile packagegroup-core-buildessential kernel-devsrc"
    KERNEL_DEV_MODULE = "kernel-modules"
    CORE_IMAGE_EXTRA_INSTALL += "${KERNEL_DEV_MODULE} \
                                 ${KERNEL_DEV_TOOLS} \
                                 systemtap \
                                "

    Problem with this approach is that such a kernel makes the rootfs too big and impractical:
    -rw-r--r--. 2 user vboxusers 101499952 May 17 14:32 core-image-minimal-beaglebone-20190517122924.rootfs.tar.xz

The main issue is point [2]: how to achieve it?
    The suggestion is to introcuce the new package in YOCTO kernel, called: kernel-headers
    The OBVIOUS benefit is that it will serve to the purpose of building modules out of the tree on the target with
    minimal mpact to rootfs!

-------

From: Zoran Stojsavljevic <zoran.stojsavljevic@gmail.com>
Date: Wed, May 15, 2019 at 10:09 PM
Subject: Re: [yocto] Building Out-of-Tree Modules on the BBB Target
To: Bruce Ashfield <bruce.ashfield@gmail.com>
Cc: Richard Purdie <richard.purdie@linuxfoundation.org>, <chris@2net.co.uk>, Yocto Project <yocto@yoctoproject.org>

> The core-image-kernel-dev image is how I do all my on target
> testing when I introduce a new reference kernel for a release.

Maybe you are correct. Maybe I should use/add in my local.conf the following:

KERNEL_DEV_TOOLS ?= "packagegroup-core-tools-profile
packagegroup-core-buildessential kernel-devsrc"
KERNEL_DEV_MODULE ?= "kernel-modules"
CORE_IMAGE_EXTRA_INSTALL += "${KERNEL_DEV_MODULE} \
                             ${KERNEL_DEV_TOOLS} \
                             systemtap \
                            "
I need to try these... Maybe this addendum will solve the $1 mio USD problem?!

> And IIRC the autobuilders are using a sato based image (Richard
> could confirm more easily that I could what image type the
> autobuilders are using for hello-world on target module tests).

I am just advertising something more simple. To have mandatory
/lib/modules/`uname -r` directory. And introduce few more packages, as
Fedora distro, for example, has: kernel-headers (assuming YOCTO
rootfs, the following will be installed: /usr/src/kernel/`uname
-r`/<header file directory structures>. This also makes addition of
/lib/modules/`uname -r`/build file (which is soft link to
usr/src/kernel/`uname -r`).

Or kernel-devel package. Then, the whole current kernel source code
will be introduced, and also support for it.

SDK building with such a support is good/cool. But sometimes, before
introducing SDK, some tests should be done on target. NO need to
optionally include built-in layer hello-world driver example. Since I
(or you name the person) have own test drivers, which will be imported
out of tree, externally, to the target test bed!

Just thinking loud...
Zoran

-------

From: Bruce Ashfield <bruce.ashfield@gmail.com>
Date: Thu, May 16, 2019 at 12:04 AM
Subject: Re: [yocto] Building Out-of-Tree Modules on the BBB Target
To: Zoran Stojsavljevic <zoran.stojsavljevic@gmail.com>
Cc: Richard Purdie <richard.purdie@linuxfoundation.org>, <chris@2net.co.uk>, Yocto Project <yocto@yoctoproject.org>

On Wed, May 15, 2019 at 4:09 PM Zoran Stojsavljevic <zoran.stojsavljevic@gmail.com> wrote:
>
> > The core-image-kernel-dev image is how I do all my on target
> > testing when I introduce a new reference kernel for a release.
>
> Maybe you are correct. Maybe I should use/add in my local.conf the following:
>
> KERNEL_DEV_TOOLS ?= "packagegroup-core-tools-profile
> packagegroup-core-buildessential kernel-devsrc"
> KERNEL_DEV_MODULE ?= "kernel-modules"
> CORE_IMAGE_EXTRA_INSTALL += "${KERNEL_DEV_MODULE} \
>                              ${KERNEL_DEV_TOOLS} \
>                              systemtap \
>                             "
> I need to try these... Maybe this addendum will solve the $1 mio USD problem?!
>
> > And IIRC the autobuilders are using a sato based image (Richard
> > could confirm more easily that I could what image type the
> > autobuilders are using for hello-world on target module tests).
>
> I am just advertising something more simple. To have mandatory
> /lib/modules/`uname -r` directory. And introduce few more packages, as
> Fedora distro, for example, has: kernel-headers (assuming YOCTO
> rootfs, the following will be installed: /usr/src/kernel/`uname
> -r`/<header file directory structures>. This also makes addition of
> /lib/modules/`uname -r`/build file (which is soft link to
> usr/src/kernel/`uname -r`).

These have all been discussed off an on over the past 5 years. I can't get at bugzilla right now, but all the details are logged in cases. A survey of all the distros, their kernel package, etc, were all looked at. We had to balance the traditional packaging with some new concepts and landed with what we have now.

> Or kernel-devel package. Then, the whole current kernel source code
> will be introduced, and also support for it.

There's a case for this one as well, I'll probably have it done for the fall release. But our devsrc used to pretty much be the full source it has now been pruned down to something more manageable.  There are definitely some cases for having the full source on the target again, and it will be a separate package, just not the minimal one to build out of tree modules, etc.

> SDK building with such a support is good/cool. But sometimes, before
> introducing SDK, some tests should be done on target. NO need to
> optionally include built-in layer hello-world driver example. Since I
> (or you name the person) have own test drivers, which will be imported
> out of tree, externally, to the target test bed!

I never use the SDK myself, so you are not alone in not going to it first. Hopefully I'll get some new patches out in the coming month before summer holidays really kick in.

Bruce
